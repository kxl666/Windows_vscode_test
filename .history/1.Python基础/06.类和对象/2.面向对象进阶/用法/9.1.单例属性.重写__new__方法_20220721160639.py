# 单例设计模式
# 目的--让类创建的对象。在系统中只有唯一的一个实例
# 每一次执行 类名() 返回的对象。内存地址是相同的

# __new__ 方法的作用是：使用类名创建对象时，无论执行多少次，在内存中永远只会创建一个对象实例。 正好符合单例设计模式的概念
# 先调用__new__,再调用__int__
# 创建对象时,会被自动调用。 而__init__是在对象被初始化时,会被自动调用
# __new__是由基类object提供的内置的静态方法，主要作用有两个：
#   1) 在内存中为对象分配空间
#   2) 返回对象的引用
# Python的解释器获得对象的引用后，将引用作为第一个参数，传递给 __init__方法

# 重写__new__方法的代码非常固定！
#   重写_new__方法一定要return super)._new__(cls)
#   否则Python的解释器得不到分配了空间的对象引用。就不会调用对象的初始化方法
#   注意：__new___是一个静态方法。在调用时需要主动传递cls参致


class MusicPlayer(object):

    def __new__(cls, *args, **kwargs):
        # 1. 创建对象时, new方法会被自动调用
        print("创建对象, 分配空间")
        # 2.为对象分配空间
        instance = super().__new__(cls)
        # 3.返回对象的引用
        return instance

    def __init__(self):
        print("播放器初始化")


# 创建对象
player = MusicPlayer()
# print(player)  # 如果没有 2 和 3 会输出：None 并没有输出 "播放器初始化"
# 因为在创建对象时，已经调用了__new__方法，并且返回了对象的引用。所以会输出 "播放器初始化"
